#parse("Spock macros.groovy")
#set($hasMocks=$MockitoMockBuilder.hasMockable($TESTED_CLASS.fields))
#if($PACKAGE_NAME)
package ${PACKAGE_NAME}
#end
import spock.lang.*
#if($hasMocks)
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.MockitoAnnotations
//import static org.mockito.Mockito.*
#end
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.modules.junit4.PowerMockRunnerDelegate;
import org.spockframework.runtime.Sputnik;

#parse("File Header.java")
@RunWith(PowerMockRunner.class)
@PowerMockRunnerDelegate(Sputnik.class)
// 需替换成所引入的静态类
@PrepareForTest([LoggerFactory.class])
@SuppressStaticInitializationFor(["org.slf4j.LoggerFactory"])
class ${CLASS_NAME}  extends Specification {
def testObj = new $TESTED_CLASS.canonicalName ()
#grRenderMockedFields($TESTED_CLASS.fields)
#if($hasMocks)
    def setup() {
      // 需Mock成所引入的静态类
      PowerMockito.mockStatic(LoggerFactory.class)
      #foreach($field in $TESTED_CLASS.fields)
      #if($MockitoMockBuilder.isMockable($field))
          testObj.$field.name = $field.name
      #end
      #end
   }
#end
#foreach($method in $TESTED_CLASS.methods)
#if($TestSubjectUtils.shouldBeTested($method))
#set($paraTestComponents=$TestBuilder.buildPrameterizedTestComponents($method,$grReplacementTypesForReturn,$grReplacementTypes,$grDefaultTypeValues))

    @Unroll
    def "$method.name"() {
#if($MockitoMockBuilder.shouldStub($method,$TESTED_CLASS.fields))
        given: "设定相关方法入参"

        and: "Mock相关接口返回"
        #foreach($field in $TESTED_CLASS.fields)
        #if($MockitoMockBuilder.isMockable($field))
        #foreach($fieldMethod in $field.type.methods)
        #if($method.returnType && $fieldMethod.returnType.name !="void" && $TestSubjectUtils.isMethodCalled($fieldMethod,$method))
        $field.name.${fieldMethod.name}($MockitoMockBuilder.buildMockArgsMatchers(${fieldMethod.methodParams},"Groovy")) >> $TestBuilder.renderReturnParam($method,$fieldMethod.returnType,"${fieldMethod.name}Response",$grReplacementTypes,$grDefaultTypeValues)
#end
#end
#end
#end

#end
        when:
        def expectedResult =  #grRenderParameterizedMethodCall($method, $TESTED_CLASS.name, $paraTestComponents.methodClassParamsStr)

#if(!$method.hasReturn())

        assert expectedResult == false //todo - validate something
#end

     then: "验证返回结果里属性值是否符合预期"
     with(expectedResult) {
    $TestSubjectUtils.formatSpockDataResults($method,$grReplacementTypesForReturn,$grReplacementTypes,$grDefaultTypeValues)
     }
     where: "表格方式验证多种分支调用场景"
    $TestSubjectUtils.formatSpockDataParameters($paraTestComponents.paramsMap, "        ",$method,$grDefaultTypeValues)
    }
#end
#end
}

